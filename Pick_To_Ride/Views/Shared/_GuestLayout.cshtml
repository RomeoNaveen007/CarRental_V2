<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    



    <!-- Bootstrap & Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />

  <style>
        /* Semi-transparent sticky navbar */
        .custom-navbar {
            background: rgba(13, 17, 23, 0.85); /* dark with 85% opacity */
            padding: 0.4rem 1rem; /* smaller height */
            transition: background 0.3s ease, padding 0.3s ease;
            backdrop-filter: blur(6px); /* adds a glassy effect */
            box-shadow: 0 2px 6px rgba(0,0,0,0.2);
            z-index: 1050;
        }

        /* Logo */
        .navbar-logo {
            height: 32px;
            width: auto;
            border-radius: 6px;
            transition: transform 0.3s ease;
        }

            .navbar-logo:hover {
                transform: scale(1.05);
            }

        /* Brand text */
        .brand-text {
            font-size: 1.1rem;
            font-weight: 600;
            color: #fff;
        }

        /* Nav links */
        .custom-navbar .nav-link {
            color: #f1f1f1;
            font-size: 0.9rem;
            margin: 0 6px;
        }

            .custom-navbar .nav-link:hover {
                color: #ffffff;
            }

        /* Login button - blue */
        .custom-login-btn {
            background: #007bff; /* bootstrap blue */
            color: #fff !important;
            font-size: 0.85rem;
            font-weight: 600;
            border-radius: 20px;
            padding: 4px 14px;
            transition: all 0.3s ease;
        }

            .custom-login-btn:hover {
                background: #0056b3; /* darker blue */
                transform: scale(1.05);
            }


  </style>
   @*  @RenderSection("Styles", required: false) *@
</head>
<body>
    <nav class="custom-navbar navbar navbar-expand-lg fixed-top">
        <div class="container-fluid">
            <!-- Brand / Logo -->
            <a class="navbar-brand d-flex align-items-center" href="/">
                <img src="@Url.Content("~/uploads/logos/logo.jpeg")" alt="Logo" class="navbar-logo me-2" />
                <span class="brand-text">Pick To Ride</span>
            </a>

            <!-- Collapse button -->
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarContent"
                    aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <!-- Menu -->
            <div class="collapse navbar-collapse justify-content-end" id="navbarContent">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="btn custom-login-btn" asp-controller="Account" asp-action="Login">Login</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

  

    <main role="main">
        @RenderBody()
    </main>

   
    <!-- Bootstrap & JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Shared JS -->
    <script>
        // Counter animation
        document.addEventListener("DOMContentLoaded", function () {
            const counters = document.querySelectorAll('.counter');
            const speed = 200;

            const animateCounter = (counter) => {
                const target = +counter.getAttribute('data-target');
                const count = +counter.innerText;
                const inc = Math.ceil(target / speed);

                if (count < target) {
                    counter.innerText = count + inc;
                    setTimeout(() => animateCounter(counter), 20);
                } else {
                    counter.innerText = target;
                }
            };

            const observer = new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        animateCounter(entry.target);
                        observer.unobserve(entry.target);
                    }
                });
            }, { threshold: 0.5 });

            counters.forEach(counter => observer.observe(counter));
        });

        // Typing effect
        document.addEventListener("DOMContentLoaded", function () {
            const texts = [" Welcome to", " Pick 2 Ride", " Rental Service"];
            const element = document.getElementById("typing-text");
            let textIndex = 0, charIndex = 0;

            function type() {
                if (textIndex < texts.length) {
                    const currentText = texts[textIndex];
                    if (charIndex < currentText.length) {
                        element.innerHTML += currentText.charAt(charIndex);
                        charIndex++;
                        setTimeout(type, 150);
                    } else {
                        textIndex++;
                        charIndex = 0;
                        setTimeout(type, 150);
                    }
                }
            }
            type();
        });
    </script>

    @RenderSection("Scripts", required: false)
</body>
</html>
